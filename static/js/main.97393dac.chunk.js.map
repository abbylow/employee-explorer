{"version":3,"sources":["components/Home.js","services/getEmployee.js","components/EmployeeInfo.js","components/Overview.js","serviceWorker.js","index.js","App.js"],"names":["Home","history","useState","searchText","setSeachText","handleSearch","push","className","Typography","variant","align","Input","placeholder","disableUnderline","value","onChange","e","target","onKeyDown","keyCode","fullWidth","IconButton","onClick","getSubordinates","name","a","axios","response","position","data","directSubordinates","EmployeeInfo","shownList","setShownList","setPosition","subordinates","setSubordinates","useEffect","thisEmployee","prev","add","deduplicatedSubs","Array","from","forEach","sub","idx","has","splice","getInfo","map","key","Overview","slug","useParams","Set","to","fontSize","Boolean","window","location","hostname","match","ReactDOM","render","basename","process","exact","path","component","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.97393dac.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport './Home.css';\nimport { Typography, Input, IconButton } from '@material-ui/core';\nimport { Magnify } from 'mdi-material-ui';\n\nexport default function Home({ history }) {\n\n  const [searchText, setSeachText] = useState('');\n\n  function updateSearchText(e) {\n    setSeachText(e.target.value);\n  }\n\n  function handleKeyDown(e) {\n    if (e.keyCode === 13) {\n      handleSearch();\n    }\n  }\n\n  function handleSearch() {\n    history.push(`/overview/${searchText}`)\n  }\n\n  return (\n    <div className=\"home\" >\n      <div className='title'>\n        <Typography variant='h2' align='center'>Employee Explorer</Typography>\n      </div>\n      <div className='search-area'>\n        <div className='search-bar'>\n          <Input\n            placeholder=\"Enter employee name \"\n            disableUnderline\n            value={searchText}\n            onChange={updateSearchText}\n            onKeyDown={handleKeyDown}\n            className='search-input'\n            fullWidth\n          />\n          <IconButton onClick={handleSearch}>\n            <Magnify className='search-icon' />\n          </IconButton>\n        </div>\n      </div>\n    </div>\n  );\n\n}\n\n","import * as axios from 'axios';\n\nexport async function getSubordinates(name) {\n  const response = await axios.get(`https://api.additivasia.io/api/v1/assignment/employees/${name}`);\n\n  return {\n    name: name,\n    position: response.data[0],\n    directSubordinates: response.data[1] ? response.data[1]['direct-subordinates'] : []\n  }\n}","import React, { useState, useEffect } from 'react';\nimport './EmployeeInfo.css';\nimport { getSubordinates } from '../services/getEmployee';\nimport { Typography } from '@material-ui/core';\n\nexport default function EmployeeInfo({ name, shownList, setShownList }) {\n\n  const [position, setPosition] = useState('');\n  const [subordinates, setSubordinates] = useState([]);\n\n  useEffect(() => {\n    async function getInfo(name) {\n      const thisEmployee = await getSubordinates(name);\n      setPosition(thisEmployee.position);\n      setShownList(prev => prev.add(name));\n\n      let deduplicatedSubs = Array.from(thisEmployee.directSubordinates);\n      deduplicatedSubs.forEach((sub, idx) => {\n        if (shownList.has(sub)) {\n          deduplicatedSubs.splice(idx, 1);\n        }\n      });\n\n      deduplicatedSubs.forEach((sub) => {\n        setShownList(prev => prev.add(sub))\n      });\n      \n      setSubordinates(deduplicatedSubs);\n    }\n\n    getInfo(name);\n\n    return;\n  }, [name, shownList, setShownList])\n\n\n  return (\n    <div className='info'>\n      <div className='self-position'>\n        <Typography variant='h5'>{name}</Typography>\n        <Typography variant='subtitle1'>{position ? position : 'No position in this company'}</Typography>\n      </div>\n      {\n        subordinates.map(sub => (\n          <EmployeeInfo name={sub} key={sub} shownList={shownList} setShownList={setShownList} />\n        ))\n      }\n    </div>\n  );\n}\n\n","import React, { useState } from 'react';\nimport './Overview.css';\nimport { Link, useParams } from 'react-router-dom';\nimport { Home } from 'mdi-material-ui';\nimport EmployeeInfo from './EmployeeInfo';\nimport { Typography } from '@material-ui/core';\n\nfunction Overview() {\n  const { slug } = useParams();\n  const [shownList, setShownList] = useState(new Set());\n  // if use an array to contain the shownList and setShwonList here, it will show a warning about update the state of an unmounted react component; use Set doesnt meet this problem, why\n\n  return (\n    <div className='overview'>\n      <div className='nav-bar'>\n        <Link to=\"/\">\n          <Home fontSize='large' />\n        </Link>\n      </div>\n      <div className='overview-title'>\n        <Typography variant='h2'>Employee Overview </Typography>\n      </div>\n      <div className='overview-title'>\n        <Typography variant='h4'>{slug} and the subordinates (if any) </Typography>\n      </div>\n      <div className='overview-body'>\n        <EmployeeInfo name={slug} shownList={shownList} setShownList={setShownList} />\n      </div>\n    </div>\n  );\n}\n\nexport default Overview;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React from 'react';\nimport { Switch, Route, BrowserRouter } from 'react-router-dom';\nimport './App.css';\nimport Home from './components/Home';\nimport Overview from './components/Overview';\n\nexport default function App() {\n\n  return (\n    <BrowserRouter basename={process.env.PUBLIC_URL}>\n      <div className=\"app\" >\n        <Switch>\n          <Route exact path='/' component={Home} />\n          <Route path={'/overview/:slug'}>\n            <Overview />\n          </Route>\n        </Switch>\n      </div>\n    </BrowserRouter >\n  );\n}\n\n"],"sourceRoot":""}