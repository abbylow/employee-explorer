{"version":3,"sources":["components/Home.js","services/getEmployee.js","components/EmployeeInfo.js","components/Overview.js","serviceWorker.js","index.js","App.js"],"names":["Home","history","useState","searchText","setSeachText","handleSearch","push","className","Typography","variant","align","Input","placeholder","disableUnderline","value","onChange","e","target","onKeyDown","keyCode","fullWidth","IconButton","onClick","getWholeTree","name","a","employeesInfo","explored","stack","length","currentNode","pop","getSubordinates","children","directSubordinates","filter","c","indexOf","forEach","axios","response","position","data","EmployeeInfo","state","self","subordinates","loadEmployee","props","result","setState","this","Object","values","map","sub","key","Component","Overview","slug","useParams","to","fontSize","Boolean","window","location","hostname","match","ReactDOM","render","exact","path","component","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a72f0477.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport './Home.css';\nimport { Typography, Input, IconButton } from '@material-ui/core';\nimport { Magnify } from 'mdi-material-ui';\n\nexport default function Home({ history }) {\n\n  const [searchText, setSeachText] = useState('');\n\n  function updateSearchText(e) {\n    setSeachText(e.target.value);\n  }\n\n  function handleKeyDown(e) {\n    if (e.keyCode === 13) {\n      handleSearch();\n    }\n  }\n\n  function handleSearch() {\n    history.push(`/overview/${searchText}`)\n  }\n\n  return (\n    <div className=\"home\" >\n      <div className='title'>\n        <Typography variant='h2' align='center'>Employee Explorer</Typography>\n      </div>\n      <div className='search-area'>\n        <div className='search-bar'>\n          <Input\n            placeholder=\"Enter employee name \"\n            disableUnderline\n            value={searchText}\n            onChange={updateSearchText}\n            onKeyDown={handleKeyDown}\n            className='search-input'\n            fullWidth\n          />\n          <IconButton onClick={handleSearch}>\n            <Magnify className='search-icon' />\n          </IconButton>\n        </div>\n      </div>\n    </div>\n  );\n\n}\n\n","import * as axios from 'axios';\n\nexport async function getWholeTree(name) {\n  let employeesInfo = {};\n  let stack = [];\n  let explored = [];\n  stack.push(name);\n  explored.push(name);\n\n  while (stack.length > 0) {\n    let currentNode = stack.pop();\n    employeesInfo[currentNode] = await getSubordinates(currentNode);\n    let children = employeesInfo[currentNode].directSubordinates;\n    if (children.length > 0) {\n      children.filter(c => explored.indexOf(c) === -1).forEach(c => { explored.push(c); stack.push(c); })\n    }\n  }\n  return employeesInfo;\n}\n\nasync function getSubordinates(name) {\n  const response = await axios.get(`http://api.additivasia.io/api/v1/assignment/employees/${name}`);\n  return {\n    name: name,\n    position: response.data[0],\n    directSubordinates: response.data[1] ? response.data[1]['direct-subordinates'] : []\n  }\n}","import React, { Component } from 'react';\nimport './EmployeeInfo.css';\nimport { getWholeTree } from '../services/getEmployee';\nimport { Typography } from '@material-ui/core';\n\nexport default class EmployeeInfo extends Component {\n\n  state = {\n    self: {},\n    subordinates: {},\n  }\n\n  componentDidMount() {\n    this.loadEmployee();\n  }\n\n  loadEmployee = async () => {\n    const result = await getWholeTree(this.props.name);\n    const self = { ...result[this.props.name] };\n    delete result[this.props.name];\n    this.setState({ self, subordinates: result });\n  }\n\n  render() {\n    const { name } = this.props;\n    const { self, subordinates } = this.state;\n\n    return (\n      <div className='info'>\n        <div className='self-position'>\n          <Typography variant='h5'>{name}</Typography>\n          <Typography variant='subtitle1'>{self.position ? self.position : 'No position in this company'}</Typography>\n        </div>\n        <div className='subtitle'>\n          <Typography variant='h6'>{Object.values(subordinates).length > 0 ? `Subordinates of employee ${name}: ` : 'No subordinate'}</Typography>\n        </div>\n        {\n          Object.values(subordinates).map(sub => (\n            <div className='sub-name' key={sub.name}>\n              <Typography variant='h6'>\n                {sub.name}\n              </Typography>\n              <Typography variant='overline'>\n                {sub.position}\n              </Typography>\n            </div>\n          ))\n        }\n      </div>\n    );\n  }\n\n}\n","import React from 'react';\nimport './Overview.css';\nimport { Link, useParams } from 'react-router-dom';\nimport { Home } from 'mdi-material-ui';\nimport EmployeeInfo from './EmployeeInfo';\nimport { Typography } from '@material-ui/core';\n\nfunction Overview() {\n  const { slug } = useParams();\n\n  return (\n    <div className='overview'>\n      <div className='nav-bar'>\n        <Link to=\"/\">\n          <Home fontSize='large' />\n        </Link>\n      </div>\n      <div className='overview-title'>\n        <Typography variant='h2'>Employee Overview </Typography>\n      </div>\n      <div className='overview-body'>\n        <EmployeeInfo name={slug} />\n      </div>\n    </div>\n  );\n}\n\nexport default Overview;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React from 'react';\nimport { Switch, Route, BrowserRouter } from 'react-router-dom';\nimport './App.css';\nimport Home from './components/Home';\nimport Overview from './components/Overview';\n\nexport default function App() {\n\n  return (\n    <BrowserRouter>\n      <div className=\"app\" >\n        <Switch>\n          <Route exact path='/' component={Home} />\n          <Route path={'/overview/:slug'}>\n            <Overview />\n          </Route>\n        </Switch>\n      </div>\n    </BrowserRouter >\n  );\n}\n\n"],"sourceRoot":""}